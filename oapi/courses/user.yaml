openapi: 3.0.0
info:
  title: User Service API
  description: API specification for the User service
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1/courses
paths:
  /courses/{courseID}/buy:
    post:
      summary: Buy Course
      tags:
        - Course
        - User
      description: Buy a course.
      parameters:
        - in: path
          name: courseID
          required: true
          description: ID of the course to buy.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment redirect URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRedirect'
  /lessons/{lessonID}/buy:
    post:
      summary: Buy Lesson
      tags:
        - Lesson
        - User
      description: Buy a lesson within a course.
      parameters:
        - in: path
          name: lessonID
          required: true
          description: ID of the lesson.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment redirect URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentRedirect:
                    $ref: '#/components/schemas/PaymentRedirect'
                  lessonAccess:
                    $ref: '#/components/schemas/LessonAccess'
  /students/register:
    post:
      summary: Register Student Profile
      tags:
        - User
      description: Register a student profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student profile registered successfully
  /teachers/register:
    post:
      summary: Register Teacher Profile
      tags:
        - User
      description: Register a teacher profile by admin or moderator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: Teacher profile registered successfully
  /user/access/lessons/{lessonID}:
    get:
      summary: Get actor's lesson access
      tags:
        - User
      description: Get lesson access for a user.
      parameters:
        - in: path
          name: lessonID
          required: true
          description: ID of the lesson to get access to.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lesson access retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonAccess'
  /user/access/lessons:
    put:
      summary: Change student's access to lesson
      tags:
        - User
      description: Change lesson access for a user by admin or moderator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonAccess'
      responses:
        '200':
          description: Lesson access changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonAccess'
  /user/access/confirm:
    post:
      summary: Confirm user access to products
      tags:
        - User
      description: Confirm access from the Finances system webhook.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buyerID:
                  type: string
                  format: uuid
                  description: ID of the buyer.
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Access confirmed successfully
components:
  schemas:
    PaymentRedirect:
      type: object
      properties:
        response:
          type: string
          description: Payment redirect URL.
    LessonAccess:
      type: object
      properties:
        ID:
          type: string
          format: uuid
          description: Unique identifier for the lesson access.
        LessonID:
          type: string
          format: uuid
          description: ID of the lesson.
        StudentID:
          type: string
          format: uuid
          description: ID of the student.
        AccessStatus:
          type: string
          enum: [ Inaccessible, Pending, Accessible ]
          description: Access status of the lesson.
    Student:
      type: object
      properties:
        AccountID:
          type: string
          format: uuid
          description: ID of the student's account.
    Teacher:
      type: object
      properties:
        AccountID:
          type: string
          format: uuid
          description: ID of the teacher's account.
    Product:
      type: object
      properties:
        ID:
          type: string
          format: uuid
          description: Unique identifier for the product.
        Owner:
          type: string
          format: uuid
          description: ID of the owner of the product.
        Price:
          type: number
          format: float
          description: Price of the product.
        Item:
          type: string
          format: uuid
          description: ID of the item associated with the product.
  securitySchemes:
    actorAuth:
      type: apiKey
      in: header
      name: actor
